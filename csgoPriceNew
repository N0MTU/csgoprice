# Import necessary libraries
import requests
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt
import time
import datetime
from collections import defaultdict
from scipy.interpolate import interp1d

# Define case names
include_names = ["Chroma Case", "Glove Case", "Operation Breakout Weapon Case", "Gamma 2 Case", "Spectrum Case", "Chroma 3 Case", "Chroma 2 Case", "Gamma Case", "Operation Wildfire Case", "Revolver Case", "Clutch Case", "Falchion Case", "Shadow Case"]

# Create dictionary to store case prices
prices = defaultdict(list)

# Loop through multiple pages of a website to scrape item prices
for page_num in range(1, 5):
    # Define the URL to scrape
    url = f"https://steamcommunity.com/market/search?q=case&category_730_ItemSet%5B%5D=any&category_730_ProPlayer%5B%5D=any&category_730_StickerCapsule%5B%5D=any&category_730_TournamentTeam%5B%5D=any&category_730_Weapon%5B%5D=any&category_730_Type%5B%5D=tag_CSGO_Type_WeaponCase&category_730_Type%5B%5D=tag_Type_Hands&appid=730#p{page_num}_default_desc"
    
    # Define headers for the HTTP request
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36",
        "Accept-Language": "en-GB,en;q=0.5",
        "Accept-Currency": "GBP"
    }
    
    # Pause for a short time to avoid overloading the website
    time.sleep(2)
    
    # Send GET request abd parse the response content
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.content, "html.parser")
    
    # Find all items listed on the web page
    items = soup.find_all("div", {"class": "market_listing_row market_recent_listing_row market_listing_searchresult"})
    
    # extract names and prices
    for item in items:
        name_element = item.find("span", {"class": "market_listing_item_name"})
        price_element = item.find("span", {"class": "market_table_value normal_price"})
        
        if name_element is not None and price_element is not None:
            name = name_element.text.strip()
            price = price_element.find("span", {"class": "normal_price"}).get("data-price")
            
            # Check if item name is in list of names to include and the price is available
            if name in include_names and price is not None:
                # Convert price to a float and store in dictionary
                prices[name].append(float(price) / 100)
                
                # Update file with item prices and dates
                with open("item_prices.txt", "a") as f:
                    f.write(f"{name},{datetime.date.today().strftime('%Y-%m-%d')},{prices[name][-1]:.2f}\n")

# Read item prices and dates
with open("item_prices.txt", "r") as f:
    lines = f.readlines()

price_lists = defaultdict(list)

#organize data by item name and date
for line in lines:
    name, date, price = line.strip().split(",")
    price_lists[name].append((date, float(price)))

# list of all unique dates in data
all_dates = sorted(set(date for prices in price_lists.values() for date, _ in prices))


# Create new Matplotlib figure
plt.figure()

# Iterate through item names and prices over time
for name, prices in price_lists.items():
    dates, values = zip(*prices)
    
    interpolated_values = []
    
    # Create new list of interpolated values for every date
    for date in all_dates:
        if date in dates:
            interpolated_values.append(values[dates.index(date)])
        else:
            interpolated_values.append(None)
    
    # Interpolate values for missing data points using a linear method
    for i in range(len(interpolated_values)):
        if interpolated_values[i] is None:
            j = i - 1
            while j >= 0 and interpolated_values[j] is None:
                j -= 1
            k = i + 1
            while k < len(interpolated_values) and interpolated_values[k] is None:
                k += 1
            if j >= 0 and k < len(interpolated_values):
                interpolated_values[i] = (interpolated_values[j] + interpolated_values[k]) / 2.0
    
    # Plot the interpolated values for each item with specified settings
    plt.plot(all_dates, interpolated_values, label=name, marker='o', markersize=4, markevery=1)


# plot title n' labels
plt.title("Price Changes Over Time")
plt.xlabel("Date")
plt.ylabel("Price (USD)")

# Make all x-axis labels bold
plt.xticks(range(len(all_dates)), all_dates, rotation=90, fontsize=8)
ax = plt.gca()
for label in ax.get_xticklabels():
    label.set_fontweight('bold')

# Add a legend to the plot
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))

# Adjust the layout and display the plot
plt.tight_layout()
plt.show()
